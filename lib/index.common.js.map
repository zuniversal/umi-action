{"version":3,"file":"index.common.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA,8CAA8C;;;;;WCA9C;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;;;;;;;;;;;;;;;;;;ACAA;AACA;;AAEA;AACA;AACA,MAAM,KAAuC,EAAE,yBAQ5C;;AAEH;AACA;AACA,IAAI,qBAAuB;AAC3B;AACA;;AAEA;AACA,kDAAe,IAAI;;;ACtBnB;;AAEO;AACP;AACA;AACA,CAAC;;AAEM;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;;AAEA;AACP;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,IAAI;AACJ;AACA;AACA;AACA,sBAAsB,KAAK,GAAG,YAAY;AAC1C,GAAG;AACH;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,OAAO,GAAG,MAAM;AACrC;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;AC/FwB;AACF","sources":["webpack://umi-action/webpack/bootstrap","webpack://umi-action/webpack/runtime/define property getters","webpack://umi-action/webpack/runtime/hasOwnProperty shorthand","webpack://umi-action/webpack/runtime/make namespace object","webpack://umi-action/webpack/runtime/publicPath","webpack://umi-action/./node_modules/@vue/cli-service/lib/commands/build/setPublicPath.js","webpack://umi-action/./index.js","webpack://umi-action/./node_modules/@vue/cli-service/lib/commands/build/entry-lib-no-default.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"\";","/* eslint-disable no-var */\n// This file is imported into lib/wc client bundles.\n\nif (typeof window !== 'undefined') {\n  var currentScript = window.document.currentScript\n  if (process.env.NEED_CURRENTSCRIPT_POLYFILL) {\n    var getCurrentScript = require('@soda/get-current-script')\n    currentScript = getCurrentScript()\n\n    // for backward compatibility, because previously we directly included the polyfill\n    if (!('currentScript' in document)) {\n      Object.defineProperty(document, 'currentScript', { get: getCurrentScript })\n    }\n  }\n\n  var src = currentScript && currentScript.src.match(/(.+\\/)[^/]+\\.js(\\?.*)?$/)\n  if (src) {\n    __webpack_public_path__ = src[1] // eslint-disable-line\n  }\n}\n\n// Indicate to webpack that this file can be concatenated\nexport default null\n","const suffix = 'Async';\n\nexport const action = type => payload => ({\n  type,\n  payload,\n});\n\nexport const crudConfigs = [\n  'getListAsync',\n  'getItemAsync',\n  'addItemAsync',\n  'editItemAsync',\n  'removeItemAsync',\n  'removeItemsAsync',\n];\n\nexport const commonConfigs = ['setSearchInfo', 'showFormModal', 'onCancel'];\n\nexport const isLoading = props => {\n  const {\n    config = [],\n    extraLoading = [],\n    path = '',\n    actions = {},\n    defConfig = [],\n  } = props;\n  const configs =\n    config.length > 0 ? config : [...crudConfigs, ...extraLoading];\n  return configs.some(asyncSuffix => {\n    return actions[`${path}/${asyncSuffix}`];\n  });\n};\n\nexport const init = (prefix, noDefault) => {\n  const isCrudArr = noDefault ? [] : crudConfigs;\n  const turnAction = (types = '') => payload => ({\n    type: prefix + '/' + types,\n    payload,\n    action: action(types),\n  });\n  const createAction = (types = '') => payload => ({\n    type: prefix + '/' + types,\n    payload,\n    action: action(types.split(suffix)[0]),\n  });\n  const transferActions = (config = []) => {\n    const actions = {};\n    config.forEach(types => (actions[types] = createAction(types)));\n    return actions;\n  };\n  const createCRUD = (config = []) => {\n    const actions = {};\n    config.forEach(types => (actions[types] = createAction(types)));\n    return actions;\n  };\n  const batchTurn = (config = []) => {\n    const actions = {};\n    config.forEach(types => (actions[types] = turnAction(types)));\n    return actions;\n  };\n  const createDispatch = model => dispatch => {\n    const actions = Object.keys(model.reducers);\n    const asyncActions = Object.keys(model.effects);\n    const dispatchActions = {};\n    [...actions, ...asyncActions].forEach(\n      types =>\n        (dispatchActions[types] = data =>\n          dispatch({\n            type: `${prefix}/${types}`,\n            payload: data,\n          })),\n    );\n    return dispatchActions;\n  };\n\n  return {\n    names: 'zyb',\n    transferActions: (config = []) => transferActions(config),\n    createCRUD: (config = []) => createCRUD([...isCrudArr, ...config]),\n    turnAction,\n    batchTurn: (config = []) => batchTurn([...commonConfigs, ...config]),\n    createActions: (asyncConfig = [], config = []) => ({\n      ...createCRUD([...isCrudArr, ...asyncConfig]),\n      ...batchTurn([...commonConfigs, ...config, 'reset']),\n    }),\n    createAction: model => {\n      const actions = Object.keys(model.reducers);\n      const asyncActions = Object.keys(model.effects);\n      return {\n        ...batchTurn(actions),\n        ...createCRUD(asyncActions),\n      };\n    },\n    createDispatch,\n  };\n};\n","import './setPublicPath'\nexport * from '~entry'\n"],"names":[],"sourceRoot":""}